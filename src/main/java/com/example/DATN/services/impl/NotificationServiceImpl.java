package com.example.DATN.services.impl;

import com.example.DATN.constants.FcmTokenStorage;
import com.example.DATN.dto.res.FoodShopResponse;
import com.example.DATN.entities.FoodShop;
import com.example.DATN.entities.NotificationFcm;
import com.example.DATN.mapper.FoodShopMapper;
import com.example.DATN.repositories.FoodShopRepo;
import com.example.DATN.repositories.NotificationRepo;
import com.example.DATN.services.NotificationService;
import com.google.firebase.messaging.FirebaseMessaging;
import com.google.firebase.messaging.Message;
import com.google.firebase.messaging.Notification;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class  NotificationServiceImpl implements NotificationService {

    @Autowired
    private FcmTokenStorage fcmTokenStorage;

    @Autowired
    private FoodShopRepo foodShopRepo;

    @Autowired
    private NotificationRepo notificationRepo;

    @Autowired
    private FoodShopMapper foodShopMapper;

    private final Random random = new Random();
        
    private final List<String> title = Arrays.asList(
            "üçü Gi·ªù ƒÉn v·∫∑t t·ªõi r·ªìi, m·ªü app ngay!",
            "üç∞ B·ªØa x·∫ø ngon h∆°n, ∆∞u ƒë√£i ng·∫≠p tr√†n!",
            "üéÅ ƒê·∫∑t m√≥n li·ªÅn tay, b·∫•t ng·ªù ƒëang ch·ªù!",
            "üçú ƒÇn ngon ch·∫≥ng c·∫ßn ƒë·∫Øn ƒëo!",
            "üî• C√≥ g√¨ hot h√¥m nay? M·ªü app kh√°m ph√° ngay!",
            "üç± M√≥n ngon s·∫µn s√†ng, ch·ªâ ch·ªù b·∫°n ƒë·∫∑t!",
            "üçî B·ª•ng ƒë√≥i r·ªìi? App lo h·∫øt!",
            "ü•§ Kh√°t r·ªìi? M·ªü app ch·ªçn m√≥n li·ªÅn!",
            "üçï Pizza v·ª´a ra l√≤, ƒë·∫∑t ngay k·∫ªo ngu·ªôi!",
            "üçó G√† r√°n gi√≤n tan, ∆∞u ƒë√£i b·∫•t ng·ªù!",
            "üõµ Giao h√†ng th·∫ßn t·ªëc, m√≥n n√≥ng h·ªïi li·ªÅn tay!",
            "üßã U·ªëng g√¨ h√¥m nay? Bubble tea ƒëang ch·ªù!",
            "üåÆ M√≥n l·∫° h√¥m nay: Kh√°m ph√° v·ªã m·ªõi!",
            "üéâ ∆Øu ƒë√£i m·ªói ng√†y ‚Äì ƒê·∫∑t m√≥n nh·∫≠n qu√†!",
            "üïí ƒê·∫øn gi·ªù ƒÉn r·ªìi, ƒë·ª´ng ƒë·ªÉ b·ª•ng r√©o!",
            "üí• Flash sale ch·ªâ h√¥m nay ‚Äì ƒê·∫∑t m√≥n li·ªÅn!",
            "üòã M√≥n ngon ƒë√£ s·∫µn, ch·ªâ thi·∫øu b·∫°n th√¥i!",
            "üí° G·ª£i √Ω h√¥m nay: Top m√≥n hot nh·∫•t!"
    );

    private static final List<String> bodyList = Arrays.asList(
            "ü•§ S·ªØa Chua Tr√¢n Ch√¢u H·∫° Long",
            "üçπ Tr√† ƒê√†o Cam S·∫£ m√°t l·∫°nh",
            "üçµ Tr√† S·ªØa Tr√¢n Ch√¢u ƒê∆∞·ªùng ƒêen",
            "üç∞ B√°nh Flan Caramel b√©o m·ªãn",
            "üçß Kem D·ª´a Th√°i Lan th∆°m ngon",
            "üçï Pizza G√† N∆∞·ªõng BBQ ƒë·∫≠m v·ªã",
            "üçú M√¨ Cay H√†n Qu·ªëc th√°ch th·ª©c",
            "ü•™ B√°nh M√¨ Ch·∫£o Th∆°m L·ª´ng",
            "üçó G√† R√°n Gi√≤n Tan",
            "ü•ó Salad Rau C·ªß T∆∞∆°i M√°t",
            "üçõ C∆°m T·∫•m S∆∞·ªùn B√¨ Ch·∫£",
            "üç£ Sushi C√° H·ªìi B√©o Ng·∫≠y",
            "üçî Burger B√≤ M·ªπ H·∫£o H·∫°ng",
            "ü•ü H√° C·∫£o T√¥m Th·ªãt Ch·∫•m S·ªët",
            "üç© Donut Socola Tan Ch·∫£y",
            "ü•ë Sinh T·ªë B∆° M√°t L·∫°nh",
            "üßã H·ªìng Tr√† Macchiato B√©o Ng·∫≠y",
            "üçõ C∆°m G√† X·ªëi M·ª° Tr·ª©ng ·ªêp",
            "üå≠ X√∫c X√≠ch ƒê·ª©c N∆∞·ªõng Than Hoa",
            "üç° B√°nh Tr√¥i T√†u Ng·ªçt L·ªãm"
    );


    public void sendNotification(String token, String title, String body, String route, String id , LocalDateTime time) {

        Message message = Message.builder()
                .setToken(token)
                .setNotification(Notification.builder()
                        .setTitle(title)
                        .setBody(body)
                        .setImage("https://media.istockphoto.com/id/1413772890/vi/vec-to/%C3%A1p-ph%C3%ADch-mua-s%E1%BA%AFm-flash-sale-ho%E1%BA%B7c-bi%E1%BB%83u-ng%E1%BB%AF-v%E1%BB%9Bi-bi%E1%BB%83u-t%C6%B0%E1%BB%A3ng-flash-thi%E1%BA%BFt-k%E1%BA%BF-m%E1%BA%ABu-bi%E1%BB%83u-ng%E1%BB%AF-flash.jpg?s=1024x1024&w=is&k=20&c=vvCirpO9E2tOTUWezC5e6SfhtUmBTqnBKN8uyd22Md4=") // ·∫¢nh nh·ªè g√≥c ph·∫£i
                        .build())
                .putData("click_action", "FLUTTER_NOTIFICATION_CLICK")
                .putData("screen", "/discountPage")
                .putData("route", route)
                .putData("title", title)
                .putData("body", body)
                .putData("time", time.toString())
                .putData("image", "https://media.istockphoto.com/id/1413772890/vi/vec-to/%C3%A1p-ph%C3%ADch-mua-s%E1%BA%AFm-flash-sale-ho%E1%BA%B7c-bi%E1%BB%83u-ng%E1%BB%AF-v%E1%BB%9Bi-bi%E1%BB%83u-t%C6%B0%E1%BB%A3ng-flash-thi%E1%BA%BFt-k%E1%BA%BF-m%E1%BA%ABu-bi%E1%BB%83u-ng%E1%BB%AF-flash.jpg?s=1024x1024&w=is&k=20&c=vvCirpO9E2tOTUWezC5e6SfhtUmBTqnBKN8uyd22Md4=")// Th√™m route v√†o data payload
                .putData("id", id)       // Th√™m id v√†o data payload
                .build();

        try {
            FirebaseMessaging.getInstance().send(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Scheduled(fixedRate = 3600000)
    //@Scheduled(fixedRate = 60000) // 60,000 ms = 1 ph√∫t
    @Transactional
    @Override
    public void applyRandomDiscount() {
        String fcmToken = fcmTokenStorage.getFcmToken();
        System.out.println("Fcm Token : " + fcmToken);
        if(fcmToken != null && !fcmToken.isEmpty()) {

            List<FoodShop> foodShops = foodShopRepo.findRandomFoodShops(10);

            List<Long> foodShopIds = foodShops.stream()
                    .map(FoodShop::getId)
                    .toList();
            String foodShopIdsString = String.join(",", foodShopIds.stream()
                    .map(String::valueOf)
                    .toList());


            String titleNotification = title.get(random.nextInt(title.size()));
            Collections.shuffle(bodyList);
            String body = String.join("\n", bodyList.subList(0, 3));

            // l∆∞u c√°c d·ªØ li·ªáu c·∫ßn thi·∫øt v√†o notificationFcm
            NotificationFcm notification = new NotificationFcm();
            notification.setTitle(titleNotification);
            notification.setBody(body);
            notification.setCreatedAt(LocalDateTime.now());
            notification.setFoodShopIds(foodShopIdsString);
            notification.setImage("default.png");
            // l∆∞u notificationFcm v√†o csdl

            NotificationFcm fcm = notificationRepo.save(notification);

            sendNotification(fcmToken, titleNotification , body , "/detailPage", fcm.getId().toString(), LocalDateTime.now());
            System.out.println("Th√¥ng b√°o : " + LocalDateTime.now());
        }
    }

    @Override
    public List<NotificationFcm> getNotificationFcms() {
        LocalDateTime endDate = LocalDateTime.now();
        LocalDateTime startDate = endDate.minusDays(7);
        List<NotificationFcm> notificationFcms = notificationRepo.findNotificationsFromLastWeek(startDate, endDate);
        Collections.reverse(notificationFcms);
        return notificationFcms;
    }

    @Override
    public List<FoodShopResponse> getFoodShopsByNotificationId(Long notificationId) {
        NotificationFcm notification = notificationRepo.findById(notificationId).orElseThrow();

        String foodShopIdsStr = notification.getFoodShopIds();
        if (foodShopIdsStr == null || foodShopIdsStr.isEmpty()) {
            return Collections.emptyList();
        }

        List<Long> foodShopIds = Arrays.stream(foodShopIdsStr.split(","))
                .map(String::trim)
                .map(Long::parseLong)
                .collect(Collectors.toList());

        // Find all food shops with the extracted IDs
        List<FoodShop> foodShops = foodShopRepo.findAllById(foodShopIds);

        // Convert FoodShop entities to FoodShopResponse DTOs
        return foodShops.stream()
                .map(foodShopMapper::FoodShopToFoodShopResponse)
                .collect(Collectors.toList());
    }
}
